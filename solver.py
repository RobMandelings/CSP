""" Command line interface to call the CSP solver. """
from math import sqrt

from enum import Enum

from typer import Typer
from tqdm import tqdm

from Sudoku import Sudoku
from NQueens import NQueens
import util

# IMPORTANT: Do not edit this file!


class Method(str, Enum):
    bf = "bf"
    fc = "fc"
    ac3 = "ac3"

app = Typer()

def solve(csp, method: Method, avgOf, initialAssignment=dict()):
    calls = []

    assert avgOf >= 1

    assignment = None

    if method == Method.bf:
        print("Solving with brute force")

        for i in range(0, avgOf):
            assignment = csp.solveBruteForce(initialAssignment)
            calls.append(list(util.progressBars.values())[0].n)
            util.progressBars.clear()

    elif method == Method.fc:
        print("Solving with forward checking")

        for i in range(0, avgOf):
            assignment = csp.solveForwardChecking(initialAssignment)
            calls.append(list(util.progressBars.values())[0].n)
            util.progressBars.clear()

    elif method == Method.ac3:
        print("Solving with forward checking and ac3")

        for i in range(0, avgOf):
            assignment = csp.solveAC3(initialAssignment)
            calls.append(list(util.progressBars.values())[0].n)
            util.progressBars.clear()

    else:
        raise RuntimeError(f"Method '{method}' not found.")

    if assignment:

        mean = sum(calls) / len(calls)
        distances_to_mean = list(map(lambda current_calls: pow(current_calls - mean, 2), calls))
        standard_deviation = sqrt(sum(distances_to_mean) / len(calls))

        tqdm.write(f"Amount of calls for {avgOf} tries: {calls}")
        tqdm.write(f"Mean: {sum(calls) / len(calls)}")
        tqdm.write(f"Standard Deviation: {standard_deviation}")

        s = csp.assignmentToStr(assignment)
        tqdm.write("\nLast Solution:")
        tqdm.write(s)
    else:
        tqdm.write("No solution found")

@app.command()
def sudoku(path: str, method: Method = Method.bf, MRV: bool = True, LCV: bool = True, avgOf=1):
    """ Solve Sudoku as a CSP. """
    if method == Method.bf:
        MRV = False
        LCV = False
    csp = Sudoku(MRV=MRV, LCV=LCV)
    initialAssignment = csp.parseAssignment(path)

    solve(csp, method, int(avgOf), initialAssignment)

@app.command()
def queens(n: int = 5, method: Method = Method.bf, MRV: bool = True, LCV: bool = True, avgOf=1):
    """ Solve the N Queens problem as a CSP. """
    if method == Method.bf:
        MRV = False
        LCV = False
    csp = NQueens(n=n, MRV=MRV, LCV=LCV)
    solve(csp, method, int(avgOf))

if __name__ == "__main__":
    app()
